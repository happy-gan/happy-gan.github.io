{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"docker使用文件创建镜像","date":"2021-12-15T08:24:00.189Z","updated":"2021-12-15T08:23:43.061Z","comments":true,"path":"2021/12/15/docker使用文件创建镜像/","link":"","permalink":"http://example.com/2021/12/15/docker%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/","excerpt":"","text":"详解利用Dockerfile构建mysql镜像并实现数据的初始化及权限设置本文提要 本文目的不仅仅是创建一个MySQL的镜像，而是在其基础上再实现启动过程中自动导入数据及数据库用户的权限设置，并且在新创建出来的容器里自动启动MySQL服务接受外部连接，主要是通过Dockerfile和shell脚本实现这一过程。 搭建步骤 1、首先创建Dckerfile： 123456789101112FROM mysql:5.7#设置免密登录ENV MYSQL_ALLOW_EMPTY_PASSWORD yes#将所需文件放到容器中COPY setup.sh /mysql/setup.shCOPY schema.sql /mysql/schema.sqlCOPY privileges.sql /mysql/privileges.sql#设置容器启动时执行的命令CMD [&quot;sh&quot;, &quot;/mysql/setup.sh&quot;] 2、编写容器启动脚本setup.sh： 123456789101112131415161718192021222324252627282930#!/bin/bashset -e#查看mysql服务的状态，方便调试，这条语句可以删除echo `service mysql status`echo &#x27;1.启动mysql....&#x27;#启动mysqlservice mysql startsleep 3echo `service mysql status`echo &#x27;2.开始导入数据....&#x27;#导入数据mysql &lt; /mysql/schema.sqlecho &#x27;3.导入数据完毕....&#x27;sleep 3echo `service mysql status`#重新设置mysql密码echo &#x27;4.开始修改密码....&#x27;mysql &lt; /mysql/privileges.sqlecho &#x27;5.修改密码完毕....&#x27;#sleep 3echo `service mysql status`echo `mysql容器启动完毕,且数据导入成功`tail -f /dev/null 这里是先导入数据，然后才是设置用户和权限，是因为mysql容器一开始为免密登录，Dockerfile中有如下设置：ENV MYSQL_ALLOW_EMPTY_PASSWORD yes,此时执行导入数据命令不需要登录验证操作，如果是先执行权限操作，那么导入数据则需要登录验证，整个过程就麻烦了许多。 3、需要导入数据的mysql脚本命令schema.sql： 1234567891011121314151617181920212223-- 创建数据库create database `docker_mysql` default character set utf8 collate utf8_general_ci;use docker_mysql;-- 建表DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `id` bigint(20) NOT NULL, `created_at` bigint(40) DEFAULT NULL, `last_modified` bigint(40) DEFAULT NULL, `email` varchar(255) DEFAULT NULL, `first_name` varchar(255) DEFAULT NULL, `last_name` varchar(255) DEFAULT NULL, `username` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;-- 插入数据INSERT INTO `user` (`id`, `created_at`, `last_modified`, `email`, `first_name`, `last_name`, `username`)VALUES (0,1490257904,1490257904,&#x27;john.doe@example.com&#x27;,&#x27;John&#x27;,&#x27;Doe&#x27;,&#x27;user&#x27;); 因为是测试，所以随便写了一个建表语句，如果是真实项目肯定不止这一张表，直接将建表语句覆盖过来就好。 4、mysql权限设置命令privileges.sql： 12345678use mysql;select host, user from user;-- 因为mysql版本是5.7，因此新建用户为如下命令：create user docker identified by &#x27;123456&#x27;;-- 将docker_mysql数据库的权限授权给创建的docker用户，密码为123456：grant all on docker_mysql.* to docker@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option;-- 这一条命令一定要有：flush privileges; 5、创建镜像 1docker build -t 13/docker-mysql . docker build 为创建镜像命令，名称为13/docker-mysql，’.’表示当前目录，即Dockerfile文件所在的目录，创建过程如下： 执行docker images查看该镜像是否存在于镜像列表中： 创建成功。 6、启动容器（二选一） 12docker run -d -p 13306:3306 13/docker-mysqldocker run -d --name test -p 13306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql/docker-mysql 启动容器，并将端口映射到本地的13306端口。 容器启动成功。 查看容器的日志记录，启动过程与启动脚本setup.sh中所规范的步骤一致，数据导入和权限设置成功：","categories":[],"tags":[]},{"title":"","slug":"docker安装","date":"2021-12-13T08:40:02.040Z","updated":"2021-12-14T02:55:43.448Z","comments":true,"path":"2021/12/13/docker安装/","link":"","permalink":"http://example.com/2021/12/13/docker%E5%AE%89%E8%A3%85/","excerpt":"","text":"docker-ce安装官方文档：https://docs.docker.com/install/linux/docker-ce/centos/ 卸载旧版本（没用）：12345678yum remove docker \\docker-client \\docker-client-latest \\docker-common \\docker-latest \\docker-latest-logrotate \\docker-logrotate \\docker-engine 12345678910111213141516171819查看docker状态：systemctl status docker关闭docker：systemctl stop docker查看yun安装的docker文件夹yum list installed |grep docker查看docker相关的rpm源文件rpm -qa |grep docker将上面查到的文件夹都删除yum -y remove [名称]删除docker的镜像文件，默认在/var/lib/docker目录下rm -rf /var/lib/docker yum安装 设置yum仓库 安装所需的包。yum-utils提供yum-config-magger效用，并device-mapper-persistent-data和lvm2由需要devicemapper存储驱动程序 123yum install -y yum-utils \\device-mapper-persistent-data \\lvm2 使用下列命令使用稳定存储库 123yum-config-manager \\--add-repo \\https://download.docker.com/linux/centos/docker-ce.repo 到这里，docker yum仓库配置完成，下一步进行安装。 安装 安装最新版 1yum install docker-ce docker-ce-cli containerd.io 安装稳定版（为了稳定性需求，生产我们一般会安装较为稳定的不那么新的版本） 版本查看命令： 123yum list docker-ce --showduplicates | sort -rdocker-ce.x86_64 3:19.03.2-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.1-3.el7 docker-ce-stable docker-ce.x86_64 3:19.03.0-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.9-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.8-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.7-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.6-3.el7 docker-ce-stable 安装命令： 1234yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.ioyum install docker-ce-18.06.3.ce-3.el7 docker-ce-cli-18.06.3.ce-3.el7 containerd.io 到此，安装完成! 启动docker1systemctl start docker 验证1docker version 配置镜像加速由于 Docker Hub 的服务器在国外，下载镜像会比较慢。幸好 DaoCloud 为我们提供了免费的国内镜像服务。 下面介绍如果使用镜像。 https://www.daocloud.io/mirror curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io 重启docker deamon，即可体验飞一般的感觉 #systemctl restart docker.service 遇到问题启动容器报错：starting container process caused “process_linux.go:297: copying bootstrap data to pipe caused &quot;write init-p: broken pipe&quot;“: unknown. 可能是Docker发布了新版本CE 18.06.2版本，此版本与Ubuntu3.xx内核不兼容。产生如上问题 解决方法： 更新kernel版本：sudo apt-get install linux-generic-lts-xenial（没用过）升级之后版本Linux panda 4.4.0-148-generic #174~14.04.1-Ubuntu升级之后运行一切正常。 将docker降为更低版本（重新安装）","categories":[],"tags":[]},{"title":"","slug":"linux下载nginx","date":"2021-12-10T01:44:11.199Z","updated":"2021-12-10T01:46:13.203Z","comments":true,"path":"2021/12/10/linux下载nginx/","link":"","permalink":"http://example.com/2021/12/10/linux%E4%B8%8B%E8%BD%BDnginx/","excerpt":"","text":"1.因为Nginx依赖于gcc的编译环境，所以，需要安装编译环境来使Nginx能够编译起来。 命令：yum install gcc-c++ 2.Nginx的http模块需要使用pcre来解析正则表达式，需要安装pcre。 命令：yum install -y pcre pcre-devel 3.安装依赖的解压包。 命令：yum install -y zlib zlib-devel 4.ssl 功能需要 openssl 库，安装 openssl。 命令：yum install -y openssl openssl-devel 下载nginx压缩包 命令：wget https://nginx.org/download/nginx-1.20.2.tar.gz 将下载好的压缩包放到合适的位置。 解压安装1.使用命令：tar -zxvf nginx-1.20.2.tar.gz 解压Nginx： 进入解压缩的nginx中使用一下命令：这是使用http访问 ./configure make make install 执行完毕后再解压缩同级目录下会出现nginx文件夹 进入该文件夹中修改conf/nginx.conf中修改nginx配置最后运行sbin/nginx文件启动nginx 查看nginx程序进程号：ps -ef|grep nginx nginx基本操作： 12345678910启动[root@localhost ~]# /usr/local/nginx/sbin/nginx停止/重启[root@localhost ~]# /usr/local/nginx/sbin/nginx -s stop(quit、reload)命令帮助[root@localhost ~]# /usr/local/nginx/sbin/nginx -h验证配置文件[root@localhost ~]# /usr/local/nginx/sbin/nginx -t配置文件[root@localhost ~]# vim /usr/local/nginx/conf/nginx.conf nginx配置SSL证书 第一步：Nginx安装SSL模块 在sbin目录下，输入以下命令 ./nginx -V 如果出现 (configure arguments: –with-http_ssl_module), 则已安装 不存在进入到nginx解压缩目录输入命令 ./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module 接下来执行 make 不要执行make install,否则会重新安装nginx 执行完成后，在objs文件夹中会出现nginx文件 停止当前nginx后替换nginx/sbin目录下的nginx文件 替换文件：cp /usr/local/nginx-1.20.2/…./nginx /usr/local/nginx/sbin 成功后通过 ./nginx -V查看。 第二步：获得ssl证书 可以通过openssl自制证书 第三步：对nginx.conf进行配置 进入nginx/conf目录中 vim nginx.conf 配置http请求转为https请求：rewrite ^(.*)$ https://$host$1 permanent; 为https配置证书： ssl_certificate /usr/local/ssl/server.pem; ssl_certificate_key /usr/local/ssl/server.key; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name 10.13.1.37; #charset koi8-r; #access_log logs/host.access.log main; #location / &#123; # root html; # index index.html index.htm; #&#125; #将请求转成https rewrite ^(.*)$ https://$host$1 permanent; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; server &#123; listen 443 ssl; server_name 10.13.1.37; ssl_certificate /usr/local/ssl/server.pem; ssl_certificate_key /usr/local/ssl/server.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125; &#125;&#125; 完成后重启nginx。 实现双向认证1.创建根证书123456789101112131415161718#（1）创建根证书私钥：openssl genrsa -out root.key 1024#（2）创建根证书请求文件：openssl req -new -out root.csr -key root.key#后续参数请自行填写，下面是一个例子：Country Name (2 letter code) [XX]:cnState or Province Name (full name) []:jiangsuLocality Name (eg, city) [Default City]:nanjingOrganization Name (eg, company) [Default Company Ltd]:hrtOrganizational Unit Name (eg, section) []:njhrtCommon Name (eg, your name or your servers hostname) []:rootEmail Address []: # 直接回车即可A challenge password []: # 直接回车即可An optional company name []: # 直接回车即可#（3）创建根证书：openssl x509 -req -in root.csr -out root.crt -signkey root.key -CAcreateserial -days 3650 在创建根证书和下面服务器请求文件和客户端请求文件的时候需要注意: 根证书的Common Name可填写为 root . 所有客户端和服务器端的证书这个字段需要填写域名或者ip，一定要注意的是，根证书的这个字段和客户端证书、服务器端证书不能一样 其他所有字段的填写，根证书、服务器端证书、客户端证书需保持一致 无用项可以选择直接回车跳过 经过上面三个命令, 我们可以得到 root.crt : 签名有效期为10年的根证书 root.key: 根证书私钥文件 后面我们可以用这个根证书去颁发服务器证书和客户端证书 2.根据根证书创建服务端证书12345678#（1）生成服务器端证书私钥：openssl genrsa -out server.key 1024#（2） 生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：openssl req -new -out server.csr -key server.key#（3） 生成服务器端公钥证书openssl x509 -req -in server.csr -out server.crt -signkey server.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650 通过上面的三个命令，我们得到： server.key：服务器端的秘钥文件 server.crt：有效期十年的服务器端公钥证书，使用根证书和服务器端私钥文件一起生成 server.csr : 服务端证书请求文件(请求证书时使用, 后续配置无用) 3.根据根证书创建客户端证书需要注意的是, 可以生成多个客户端证书, 只需安装下面1-4步重新生成即可 1234567891011#（1）生成客户端证书秘钥：openssl genrsa -out client.key 1024#（2） 生成客户端证书请求文件，过程和注意事项参考根证书，本节不详述：openssl req -new -out client.csr -key client.key#（3） 生客户端证书openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650#（4） 生客户端p12格式证书，需要输入一个密码，选一个好记的，比如123456openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12 重复使用上面的三个命令，我们得到： client.key：客户端的私钥文件 client.crt：有效期十年的客户端证书，使用根证书和客户端私钥一起生成 client.p12：客户端p12格式，这个证书文件包含客户端的公钥和私钥，主要用来给浏览器或postman访问使用 clinet.csr : 客户端证书请求文件(请求证书时使用, 后续配置无用) 4.nginx配置12345678910111213141516171819server &#123; listen 443 ssl; server_name www.yourdomain.com;# 无域名可填写ip ssl_certificate /data/sslKey/server.crt; #server公钥证书 ssl_certificate_key /data/sslKey/server.key; #server私钥 ssl_client_certificate /data/sslKey/root.crt; #根证书，可以验证所有它颁发的客户端证书 ssl_verify_client on; #开启客户端证书验证 # 反向代理eg: 作用是通过https(443端口)访问, 则会直接去请求本机的8991端口 location / &#123; proxy_pass http://127.0.0.1:8991/; &#125; #location / &#123; # root html; # index index.html index.htm; # &#125; &#125; 注意: 配置的主要内容是配置了服务器端证书的公钥私钥以及根证书的公钥, 并且ssl_verify_client 参数设置为 on 如果客户端证书不是由根证书直接颁发的，配置中还需要加一个配置：ssl_verify_depth 1; 配置完成后，通过nginx -s reload 令配置文件重新加载, 无需重启 验证： 1.使用curl,（需要将root.p12放在受信任的根证书颁发机构中）。 123456#--cert指定客户端公钥证书的路径#--key指定客户端私钥文件的路径#-k不校验证书的合法性，因为我们用的是自签名证书，所以需要加这个参数#可以使用-v来观察具体的SSL握手过程curl --cert ./client.crt --key ./client.key https://integration-fred2.fredhuang.com -k -v 2.在浏览器中 将client.p12加入就可以。","categories":[],"tags":[]},{"title":"github搜索技巧","slug":"github搜索技巧","date":"2021-12-09T00:56:42.000Z","updated":"2021-12-10T01:39:13.682Z","comments":true,"path":"2021/12/09/github搜索技巧/","link":"","permalink":"http://example.com/2021/12/09/github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/","excerpt":"","text":"github搜索技巧 in:name: 名称 stars:&gt;4000 pushed: &gt;2020-01-01 language:java fork:&gt;10000","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-12-09T00:48:37.326Z","updated":"2021-12-09T00:48:37.326Z","comments":true,"path":"2021/12/09/hello-world/","link":"","permalink":"http://example.com/2021/12/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}