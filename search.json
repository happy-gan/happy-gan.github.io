[{"date":"2021-12-24T02:00:15.966Z","url":"/2021/12/24/docker%E5%AE%89%E8%A3%85/","categories":[["undefined",""]],"content":"docker学习（一）：安装docker官方文档： 1. 卸载旧版本dockercentos卸载docker命令 彻底删除 2. 安装docker推荐使用安装脚本安装 3.配置阿里云镜像加速"},{"date":"2021-12-20T07:02:36.696Z","url":"/2021/12/20/docker-compose%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8/","categories":[["undefined",""]],"content":"docker-compose下载使用在linux中在线下载并移动到 /usr/local/bin/docker-compose目录下并重命名为docker-compose 赋予权限 docker-compose使用创建docker-compose.yml文件 "},{"date":"2021-12-15T08:24:00.189Z","url":"/2021/12/15/docker%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/","categories":[["undefined",""]],"content":"详解利用Dockerfile构建mysql镜像并实现数据的初始化及权限设置本文提要 本文目的不仅仅是创建一个MySQL的镜像，而是在其基础上再实现启动过程中自动导入数据及数据库用户的权限设置，并且在新创建出来的容器里自动启动MySQL服务接受外部连接，主要是通过Dockerfile和shell脚本实现这一过程。 搭建步骤 1、首先创建Dckerfile： 2、编写容器启动脚本setup.sh： 这里是先导入数据，然后才是设置用户和权限，是因为mysql容器一开始为免密登录，Dockerfile中有如下设置：ENV MYSQL_ALLOW_EMPTY_PASSWORD yes,此时执行导入数据命令不需要登录验证操作，如果是先执行权限操作，那么导入数据则需要登录验证，整个过程就麻烦了许多。 3、需要导入数据的mysql脚本命令schema.sql： 因为是测试，所以随便写了一个建表语句，如果是真实项目肯定不止这一张表，直接将建表语句覆盖过来就好。 4、mysql权限设置命令privileges.sql： 5、创建镜像 docker build 为创建镜像命令，名称为13/docker-mysql，’.’表示当前目录，即Dockerfile文件所在的目录，创建过程如下： 执行docker images查看该镜像是否存在于镜像列表中： 创建成功。 6、启动容器（二选一） 启动容器，并将端口映射到本地的13306端口。 容器启动成功。 查看容器的日志记录，启动过程与启动脚本setup.sh中所规范的步骤一致，数据导入和权限设置成功： "},{"date":"2021-12-13T08:40:02.040Z","url":"/2021/12/13/docker%E5%AE%89%E8%A3%85(%E8%BF%87%E6%97%B6)/","categories":[["undefined",""]],"content":"docker-ce安装官方文档： 卸载旧版本（没用）： yum安装 设置yum仓库 安装所需的包。yum-utils提供yum-config-magger效用，并device-mapper-persistent-data和lvm2由需要devicemapper存储驱动程序 使用下列命令使用稳定存储库 到这里，docker yum仓库配置完成，下一步进行安装。 安装 安装最新版 安装稳定版（为了稳定性需求，生产我们一般会安装较为稳定的不那么新的版本） 版本查看命令： 安装命令： 到此，安装完成! 启动docker 验证 配置镜像加速由于 Docker Hub 的服务器在国外，下载镜像会比较慢。幸好 DaoCloud 为我们提供了免费的国内镜像服务。 下面介绍如果使用镜像。  curl -sSL  | sh -s  重启docker deamon，即可体验飞一般的感觉 #systemctl restart docker.service 遇到问题启动容器报错：starting container process caused “process_linux.go:297: copying bootstrap data to pipe caused &quot;write init-p: broken pipe&quot;“: unknown. 可能是Docker发布了新版本CE 18.06.2版本，此版本与Ubuntu3.xx内核不兼容。产生如上问题 解决方法： 更新kernel版本：sudo apt-get install linux-generic-lts-xenial（没用过）升级之后版本Linux panda 4.4.0-148-generic #174~14.04.1-Ubuntu升级之后运行一切正常。 将docker降为更低版本（重新安装） "},{"date":"2021-12-10T01:44:11.199Z","url":"/2021/12/10/linux%E4%B8%8B%E8%BD%BDnginx/","categories":[["undefined",""]],"content":"1.因为Nginx依赖于gcc的编译环境，所以，需要安装编译环境来使Nginx能够编译起来。 命令：yum install gcc-c++ 2.Nginx的http模块需要使用pcre来解析正则表达式，需要安装pcre。 命令：yum install -y pcre pcre-devel 3.安装依赖的解压包。 命令：yum install -y zlib zlib-devel 4.ssl 功能需要 openssl 库，安装 openssl。 命令：yum install -y openssl openssl-devel 下载nginx压缩包 命令：wget  将下载好的压缩包放到合适的位置。 解压安装1.使用命令：tar -zxvf nginx-1.20.2.tar.gz 解压Nginx： 进入解压缩的nginx中使用一下命令：这是使用http访问 ./configure make make install 执行完毕后再解压缩同级目录下会出现nginx文件夹 进入该文件夹中修改conf/nginx.conf中修改nginx配置最后运行sbin/nginx文件启动nginx 查看nginx程序进程号：ps -ef|grep nginx nginx基本操作： nginx配置SSL证书 第一步：Nginx安装SSL模块 在sbin目录下，输入以下命令 ./nginx -V 如果出现 (configure arguments: –with-http_ssl_module), 则已安装 不存在进入到nginx解压缩目录输入命令 ./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module 接下来执行 make 不要执行make install,否则会重新安装nginx 执行完成后，在objs文件夹中会出现nginx文件 停止当前nginx后替换nginx/sbin目录下的nginx文件 替换文件：cp /usr/local/nginx-1.20.2/…./nginx /usr/local/nginx/sbin 成功后通过 ./nginx -V查看。 第二步：获得ssl证书 可以通过openssl自制证书 第三步：对nginx.conf进行配置 进入nginx/conf目录中 vim nginx.conf 配置http请求转为https请求：rewrite ^(.*)$ https://$host$1 permanent; 为https配置证书： 完成后重启nginx。 实现双向认证1.创建根证书 在创建根证书和下面服务器请求文件和客户端请求文件的时候需要注意: 根证书的Common Name可填写为 root . 所有客户端和服务器端的证书这个字段需要填写域名或者ip，一定要注意的是，根证书的这个字段和客户端证书、服务器端证书不能一样 其他所有字段的填写，根证书、服务器端证书、客户端证书需保持一致 无用项可以选择直接回车跳过 经过上面三个命令, 我们可以得到 root.crt : 签名有效期为10年的根证书 root.key: 根证书私钥文件 后面我们可以用这个根证书去颁发服务器证书和客户端证书 2.根据根证书创建服务端证书 通过上面的三个命令，我们得到： server.key：服务器端的秘钥文件 server.crt：有效期十年的服务器端公钥证书，使用根证书和服务器端私钥文件一起生成 server.csr : 服务端证书请求文件(请求证书时使用, 后续配置无用) 3.根据根证书创建客户端证书需要注意的是, 可以生成多个客户端证书, 只需安装下面1-4步重新生成即可 重复使用上面的三个命令，我们得到： client.key：客户端的私钥文件 client.crt：有效期十年的客户端证书，使用根证书和客户端私钥一起生成 client.p12：客户端p12格式，这个证书文件包含客户端的公钥和私钥，主要用来给浏览器或postman访问使用 clinet.csr : 客户端证书请求文件(请求证书时使用, 后续配置无用) 4.nginx配置 注意: 配置的主要内容是配置了服务器端证书的公钥私钥以及根证书的公钥, 并且ssl_verify_client 参数设置为 on 如果客户端证书不是由根证书直接颁发的，配置中还需要加一个配置：ssl_verify_depth 1; 配置完成后，通过nginx -s reload 令配置文件重新加载, 无需重启 验证： 1.使用curl,（需要将root.p12放在受信任的根证书颁发机构中）。 2.在浏览器中 将client.p12加入就可以。"},{"title":"github搜索技巧","date":"2021-12-09T00:56:42.000Z","url":"/2021/12/09/github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/","categories":[["undefined",""]],"content":"github搜索技巧 in:name: 名称 stars:&gt;4000 pushed: &gt;2020-01-01 language:java fork:&gt;10000 "},{"title":"Hello World","date":"2021-12-09T00:48:37.326Z","url":"/2021/12/09/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]